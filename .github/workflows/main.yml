name: Build AbyssVideoDownloader

on:
  push:
    branches: [ master ]
    paths-ignore:
      - "**.md"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_NAME: AbyssVideoDownloader
  APP_VERSION: 1.5.13
  TAG_NAME: v1.5.13
  JAR_NAME: abyss-dl.jar
  PROJECT_DIR: AbyssVideoDownloader

jobs:
  build_linux:
    name: Build JAR (Ubuntu)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone Repository
        run: |
          git clone https://github.com/abdlhay/AbyssVideoDownloader.git
          cd $PROJECT_DIR
          echo "Cloned."

      - name: Make Gradle Executable
        run: chmod +x $PROJECT_DIR/gradlew

      - name: Build
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./gradlew clean build

      - name: Collect artifacts
        run: |
          mkdir -p out/linux
          cp $PROJECT_DIR/build/libs/${JAR_NAME} out/linux/${JAR_NAME}

      - name: Upload artifact (JAR)
        uses: actions/upload-artifact@v4
        with:
          name: linux-jar
          path: out/linux/${{ env.JAR_NAME }}
          if-no-files-found: error

  build_windows:
    name: Build EXE (Windows)
    runs-on: windows-latest
    needs: build_linux
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone Repository
        shell: bash
        run: |
          git clone https://github.com/abdlhay/AbyssVideoDownloader.git

      - name: Build (Gradle)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          ./gradlew.bat clean build

      # If your JAR includes Main-Class in MANIFEST.MF, --main-class is optional.
      # If not, add: --main-class your.package.Main
      - name: Package EXE with jpackage
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          mkdir -p build/dist
          jpackage \
            --type exe \
            --name "${APP_NAME}" \
            --app-version "${APP_VERSION}" \
            --input "build/libs" \
            --main-jar "${JAR_NAME}" \
            --dest "build/dist" \
            --win-dir-chooser \
            --win-menu \
            --win-shortcut
          ls -la build/dist

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p out/windows
          cp "${PROJECT_DIR}/build/dist/${APP_NAME}-${APP_VERSION}.exe" "out/windows/${APP_NAME}-${APP_VERSION}.exe" 2>/dev/null || \
          cp "${PROJECT_DIR}/build/dist/${APP_NAME}.exe" "out/windows/${APP_NAME}.exe"

      - name: Upload artifact (EXE)
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: |
            out/windows/*.exe
          if-no-files-found: error

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: [ build_linux, build_windows ]
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: ls -R dist

      - name: Create Release
        uses: softprops/action-gh-release@v2.0.6
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.APP_NAME }}-v${{ github.run_number }}
          draft: true
          files: |
            dist/linux-jar/${{ env.JAR_NAME }}
            dist/windows-exe/*.exe
