name: Build AbyssVideoDownloader (GraalVM Portable EXE)

on:
  push:
    branches: [ master ]
    paths-ignore:
      - "**.md"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_NAME: AbyssVideoDownloader
  APP_VERSION: 1.5.13
  TAG_NAME: v1.5.13
  PROJECT_DIR: AbyssVideoDownloader
  UBER_JAR: abyss-dl-all.jar

jobs:
  build_windows_portable:
    name: Build Portable EXE (Windows, GraalVM)
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Clone source project
        shell: bash
        run: |
          git clone https://github.com/abdlhay/AbyssVideoDownloader.git

      - name: Set up GraalVM (Java 21) with Native Image
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          components: 'native-image'

      # Native Image on Windows requires MSVC toolchain available on PATH
      - name: Set up MSVC developer command prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            %USERPROFILE%\.gradle\caches
            %USERPROFILE%\.gradle\wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build (Gradle) â€” produce uber/fat JAR
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          # If the project already includes Shadow, this will emit *-all.jar.
          # Otherwise, add the Shadow plugin in build.gradle before running CI.
          ./gradlew.bat --no-daemon clean shadowJar
          ls -la build/libs

      - name: Prepare output folders
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          mkdir -p build/native

      - name: Build native EXE with GraalVM Native Image
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Use the fat jar as input to native-image
          native-image ^
            --no-fallback ^
            --enable-http ^
            --enable-https ^
            -H:Name=${{ env.APP_NAME }} ^
            -H:Path=build/native ^
            -jar build/libs/${{ env.UBER_JAR }}

          echo "Produced files:"
          dir build\native

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p out/windows
          cp "${{ env.PROJECT_DIR }}/build/native/${{ env.APP_NAME }}.exe" "out/windows/${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe"

      - name: Upload artifact (Portable EXE)
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe-portable
          path: out/windows/*.exe
          if-no-files-found: error

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: [ build_windows_portable ]
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: ls -R dist

      - name: Create Release
        uses: softprops/action-gh-release@v2.0.6
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: AbyssVideoDownloader-v${{ github.run_number }}
          draft: true
          files: |
            dist/windows-exe-portable/*.exe
